import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o,c as r,a as t,b as n,d as a,e as i}from"./app-5634c12e.js";const c="/blog-v2/assets/1723098617303-d66fd380.png",d={},u={href:"http://readme.md",target:"_blank",rel:"noopener noreferrer"},m={href:"https://vuepress-theme-hope.github.io/zh/guide/layout/home/#home",target:"_blank",rel:"noopener noreferrer"},v={href:"https://vuepress.vuejs.org/zh/guide/deploy.html#github-pages",target:"_blank",rel:"noopener noreferrer"};function b(k,s){const e=l("ExternalLinkIcon");return o(),r("div",null,[s[5]||(s[5]=t(`<h4 id="初始化-vuepress" tabindex="-1"><a class="header-anchor" href="#初始化-vuepress" aria-hidden="true">#</a> 初始化 vuepress</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> yourBlogName <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> yourBlogName <span class="token comment">#创建一个文件夹并进入，也可以直接在创建用vscode打开该文件夹</span>
<span class="token function">npm</span> init <span class="token comment">#用npm初始化，也可以用其他的</span>
<span class="token function">npm</span> <span class="token function">install</span> vuepress <span class="token parameter variable">-D</span> <span class="token comment">#安装vuepress</span>
<span class="token function">npm</span> <span class="token function">install</span> vuepress-theme-hope <span class="token parameter variable">-D</span> <span class="token comment">#安装vuepress-theme-hope主题</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token comment">#最好npm install一下，防止包丢失</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="修改-package-json-文件" tabindex="-1"><a class="header-anchor" href="#修改-package-json-文件" aria-hidden="true">#</a> 修改 package.json 文件</h4><p>添加以下代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vuepress dev docs&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vuepress build docs&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="第一篇文章" tabindex="-1"><a class="header-anchor" href="#第一篇文章" aria-hidden="true">#</a> 第一篇文章</h4><p>1、在根目录下新建 docs 文件夹</p>`,7)),n("p",null,[s[1]||(s[1]=a("2、在 docs 文件夹下面新建 ")),n("a",u,[s[0]||(s[0]=a("readme.md")),i(e)]),s[2]||(s[2]=a(" 文件（这是作为首页）"))]),n("p",null,[n("a",m,[s[3]||(s[3]=a("首页配置参照")),i(e)])]),s[6]||(s[6]=t(`<h4 id="vuepress-theme-hope-主题配置" tabindex="-1"><a class="header-anchor" href="#vuepress-theme-hope-主题配置" aria-hidden="true">#</a> vuepress-theme-hope 主题配置</h4><p>1、在 docs 文件夹下新建.vuepress 文件夹</p><p>2、在.vuepress 文件夹下新建 config.js 文件</p><p>具体内容：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> config <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;vuepress-theme-hope&quot;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// your config here</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
#必须要按照以上写法，不能使用vuepress官方文档的写法
#具体配置项参照：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>vuepress<span class="token operator">-</span>theme<span class="token operator">-</span>hope<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token operator">/</span>zh<span class="token operator">/</span>config<span class="token operator">/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="打包" tabindex="-1"><a class="header-anchor" href="#打包" aria-hidden="true">#</a> 打包</h4><p>1、运行npm run build</p><p>2、由于我在配置文件中设置的是 dest: &#39;public&#39;, 所以打包完成后根目录会出现一个public文件夹，里面是打包后的内容，点开index.html文件会出现样式丢失，这个不用管，因为用的是相对路径，所以只有上线部署后才会有样式。</p><h4 id="部署" tabindex="-1"><a class="header-anchor" href="#部署" aria-hidden="true">#</a> 部署</h4><p>我是部署到github上的，由于我不是第一次部署，所以仓库名已经被占用了，我用的是另一个仓库</p>`,10)),n("p",null,[n("a",v,[s[4]||(s[4]=a("具体看官网文档")),i(e)])]),s[7]||(s[7]=t(`<p>但我想在我的github博客仓库中设立两个分支，一个分支存放我博客的所有内容，一个分支存放打包后的页面</p><p>思路：主分支master存放打包后的页面，另一个分支存放我博客的所有内容</p><p>在根目录下新建一个deploy.sh文件</p><p>内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/env sh</span>

<span class="token comment"># 确保脚本抛出遇到的错误</span>
<span class="token builtin class-name">set</span> <span class="token parameter variable">-e</span>

<span class="token comment"># 生成静态文件</span>
<span class="token function">npm</span> run build

<span class="token comment"># 进入生成的文件夹</span>
<span class="token builtin class-name">cd</span> public
<span class="token comment"># 如果是发布到自定义域名</span>
<span class="token comment"># echo &#39;www.example.com&#39; &gt; CNAME</span>

<span class="token function">git</span> init
<span class="token function">git</span> <span class="token function">add</span> *
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;发布&#39;</span>

<span class="token comment"># 如果发布到 https://&lt;USERNAME&gt;.github.io</span>
<span class="token comment"># git push -f git@github.com:&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io.git master</span>

<span class="token comment"># 如果发布到 https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;</span>
<span class="token function">git</span> push <span class="token parameter variable">-f</span> git@github.com:xiezhenghua123/blob.git master <span class="token comment">#这是我的仓库名</span>

<span class="token builtin class-name">cd</span> -
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：这个文件必须用git打开才能正常运行</p><p>写好文章后运行这个文件，命令：./deploy.sh</p><p>运行过程中，项目会自动打包，然后上传到github博客仓库中的master分支</p><p>github上需要操作的步骤：</p><figure><img src="`+c+`" alt="1723098617303" tabindex="0" loading="lazy"><figcaption>1723098617303</figcaption></figure><p>完成以上步骤，博客就能访问了。</p><p>为了防止本地仓库丢失，我们需要把整个博客文件上传到github仓库上的public（名字自己定）分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> public <span class="token comment">#本地新建一个public分支</span>
<span class="token function">git</span> <span class="token function">add</span> *
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;xxx&#39;</span>
<span class="token function">git</span> push <span class="token parameter variable">-f</span> --set-upstream origin public
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="写好文章后发布的完整步骤" tabindex="-1"><a class="header-anchor" href="#写好文章后发布的完整步骤" aria-hidden="true">#</a> 写好文章后发布的完整步骤</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./deploy.sh 
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> public <span class="token comment">#本地新建一个public分支,只需要运行一次进行，以后不要切换分支</span>
<span class="token function">git</span> <span class="token function">add</span> *
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;xxx&#39;</span>
<span class="token function">git</span> push <span class="token parameter variable">-f</span> --set-upstream origin public <span class="token comment">#运行之后，以后就只要git push就行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15))])}const f=p(d,[["render",b],["__file","firstStudy.html.vue"]]);export{f as default};
