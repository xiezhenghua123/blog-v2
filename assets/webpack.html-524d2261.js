import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as r,c as l,b as n,d as s,e,a as t}from"./app-cc017adc.js";const c="/blog-v2/assets/image-20220903160123119-841e34c1.png",i={},u=t(`<h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h3><p>webpack是一个前端资源构建工具，一个静态模块打包器。</p><p>webpack有统一入口文件，将所有的资源文件分别输出为代码块（chunk），再根据依赖打包成对应的静态资源（bundle）。</p><h3 id="五个核心概念" tabindex="-1"><a class="header-anchor" href="#五个核心概念" aria-hidden="true">#</a> 五个核心概念</h3><h4 id="_1、entry" tabindex="-1"><a class="header-anchor" href="#_1、entry" aria-hidden="true">#</a> 1、entry</h4><p>入口（entry）只是webpack应该使用哪个文件作为入口起点开始打包。分析构建内部依赖图。默认值为./src/index.js。可以设置单入口和多入口。</p><h4 id="_2、output" tabindex="-1"><a class="header-anchor" href="#_2、output" aria-hidden="true">#</a> 2、output</h4><p>输出（output）告诉webpack在哪里输出它所创建的bundle。以及如何命名。主要输出文件默认值为./dist/main.js，其他文件默认放置./dist文件夹。</p><p>三种hash：</p><p>①fullhash 全量hash 只要项目中的任何一个文件内容发生变动，打包文件hash都会变化</p><p>②chunkhash 根据不同的入口文件进行依赖文件分析、生成chunkhash、当某个文件发生变动时，再次打包时，只有该文件以及依赖该文件的hash文件值发生改变</p><h4 id="_3、loader" tabindex="-1"><a class="header-anchor" href="#_3、loader" aria-hidden="true">#</a> 3、loader</h4><p>webpack只能理解js和json文件，loader可以让webpack能够去处理其他类型的文件，比如less、scss等。</p><p>配置loader需要放到module的rules里面，每个loader拥有test（识别哪些文件会被转换），use（使用哪个loader）。</p><p>编写一个简单loader：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">/* 
    TODO source .....
    */</span>
    <span class="token keyword">return</span> source <span class="token comment">// or this.callback(null, source) </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),d={href:"https://webpack.docschina.org/loaders/",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,[n("strong",null,"webpack5处理字体文件图片等资源的loader已经内置，若想使用旧版本公共，需要添加：type: 'javascript/auto'")],-1),h={href:"https://webpack.docschina.org/guides/asset-modules/",target:"_blank",rel:"noopener noreferrer"},b=t(`<h4 id="_4、plugins" tabindex="-1"><a class="header-anchor" href="#_4、plugins" aria-hidden="true">#</a> 4、plugins</h4><p>插件比loader的作用更加强大，可以执行范围更广的任务。包括：打包优化、资源管理，注入环境变量等。</p><p>编写一个简单plugin：</p><p>五步：</p><p>1、实现一个js函数或者类。</p><p>2、在函数原型中定义一个注入complier的apply方法。</p><p>3、apply函数中通过complier插入指定的事件钩子，在钩子回调中拿到compliation对象。</p><p>4、使用compliation操纵修改内部实例数据。</p><p>5、功能完成后调用weboack的回调。</p><p>complier：代表了完整的webpack环境配置，这个对象在webpack启动时就一次性被建立，可以访问options、hook、loader和plugin等。</p><p>compilation：ciompilation模块会被complier用来创建新的编译，它能访问所有的模块以及依赖，它会对应用程序的依赖图中所有模块进行字面上的编译(literal compilation)。在编译阶段，模块会被加载(loaded)、封存(sealed)、优化(optimized)、分块(chunked)、哈希(hashed)和重新创建(restored)。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">PluginDemo</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">PluginDemo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">apply</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//complier.plugin语法已经废弃，内部异步需要使用tapAsync(异步内容需要使用callback回调)，tapPromise(返回   promise)，具体看官方文档。</span>
  compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>done<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;PluginDemo&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compilation</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;compilation&quot;</span><span class="token punctuation">,</span> compilation<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> PluginDemo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),m={href:"https://webpack.docschina.org/contribute/writing-a-plugin",target:"_blank",rel:"noopener noreferrer"},v={href:"https://webpack.docschina.org/guides/output-management/#cleaning-up-the-dist-folder",target:"_blank",rel:"noopener noreferrer"},g=t(`<h4 id="_5、mode" tabindex="-1"><a class="header-anchor" href="#_5、mode" aria-hidden="true">#</a> 5、mode</h4><p>有development和production两种，分别代表开发环境和生产环境。</p><p>package.json里面执行不同的wepack配置文件需要加--config</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --config webpack/webpack.prod.js&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack serve --config  webpack/webpack.dev.js&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="处理js资源" tabindex="-1"><a class="header-anchor" href="#处理js资源" aria-hidden="true">#</a> 处理js资源</h4><p><strong>Eslint</strong>（js和jsx检查工具：.eslintrc.*）</p>`,6),_={href:"https://eslint.bootcss.com/docs/rules/",target:"_blank",rel:"noopener noreferrer"},f=n("p",null,[n("strong",null,"babel"),s("（js编译器，将es6高级语法编译成浏览器可识别的低级语法：babel.config.*）")],-1),j={href:"https://www.babeljs.cn/",target:"_blank",rel:"noopener noreferrer"},w=n("h4",{id:"devserver开发服务器搭建",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#devserver开发服务器搭建","aria-hidden":"true"},"#"),s(" devServer开发服务器搭建")],-1),y={href:"https://webpack.docschina.org/guides/development/#using-webpack-dev-server",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,[n("strong",null,"sourceMap使用")],-1),q={href:"https://webpack.docschina.org/configuration/devtool",target:"_blank",rel:"noopener noreferrer"},P=n("p",null,'开发模式一般用"cheap-module-spurce-map",生产环境一般用“source-map”',-1),D=n("p",null,[n("strong",null,"code Split代码分割")],-1),E={href:"https://webpack.docschina.org/guides/code-splitting/#dynamic-imports",target:"_blank",rel:"noopener noreferrer"},B=n("h4",{id:"js兼容性问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#js兼容性问题","aria-hidden":"true"},"#"),s(" js兼容性问题")],-1),L={href:"https://babeljs.io/docs/en/babel-preset-env#usebuiltins",target:"_blank",rel:"noopener noreferrer"},N=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">useBuiltIns</span><span class="token operator">:</span> <span class="token string">&quot;usage&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">corejs</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">proposals</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="动态引入" tabindex="-1"><a class="header-anchor" href="#动态引入" aria-hidden="true">#</a> 动态引入</h4>`,2),O={href:"https://webpack.docschina.org/api/module-methods/#import",target:"_blank",rel:"noopener noreferrer"},V=n("p",null,[n("strong",null,"踩坑：")],-1),C=n("p",null,"1、路径问题",-1),I=n("p",null,`path.resolve(__dirname,'../src/loader/replaceLoader.js')中的"dirname"表示当前配置文件的绝对路径。`,-1),S=n("p",null,"不使用path.resolve加绝对路径的话只需要写成'./src/loader/replaceLoader.js'",-1),T=n("p",null,"2、文件指纹",-1),z=n("figure",null,[n("img",{src:c,alt:"image-20220903160123119",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20220903160123119")],-1);function M(W,A){const a=p("ExternalLinkIcon");return r(),l("div",null,[u,n("p",null,[s("常见loader：sass-loader、style-loader、less-loader、file-loader、url-loader、babel-loader等，"),n("a",d,[s("官文链接"),e(a)])]),k,n("p",null,[n("a",h,[s("官文链接"),e(a)])]),b,n("p",null,[n("a",m,[s("官文链接"),e(a)])]),n("p",null,[s("常见plugin：HtmlWebPlugin，CleanWebpackPlugin（webpack5已经内置，"),n("a",v,[s("链接"),e(a)]),s("）、MiniCssExtractPlugin")]),g,n("p",null,[n("a",_,[s("具体规则"),e(a)])]),f,n("p",null,[n("a",j,[s("具体规则"),e(a)])]),w,n("p",null,[n("a",y,[s("官方文档"),e(a)])]),x,n("p",null,[s("追踪错误代码，方便调试开发。"),n("a",q,[s("文档"),e(a)])]),P,D,n("p",null,[s("用于多入口项目。"),n("a",E,[s("文档"),e(a)])]),B,n("p",null,[s("promise等es6+的语法，浏览器不识别，使用@babel/preset和core-js可以解决，在babel.config.js中进行配置，"),n("a",L,[s("文档"),e(a)])]),N,n("p",null,[n("a",O,[s("文档"),e(a)]),s(" 注：import()中的表达式不能使用完全动态参数。")]),V,C,I,S,T,z])}const G=o(i,[["render",M],["__file","webpack.html.vue"]]);export{G as default};
