import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as c,c as i,a as t,b as s,d as a,e as o}from"./app-1d4424f2.js";const d="/blog-v2/assets/image-20240817153750652-62e7ea6d.png",r={},u={href:"https://typicode.github.io/husky/zh/get-started.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/lint-staged/lint-staged",target:"_blank",rel:"noopener noreferrer"},v={href:"https://nodejs.cn/api/process/process_argv.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.npmjs.com/package/cross-env",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.npmjs.com/package/cz-conventional-changelog",target:"_blank",rel:"noopener noreferrer"};function b(h,n){const e=l("ExternalLinkIcon");return c(),i("div",null,[n[22]||(n[22]=t(`<h3 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> <strong>前言</strong></h3><pre><code>前不久接到一个需求，为了保证信息安全的问题，需要去除项目中所有的console.log打印。常见的通过webpack、vite打包编译的项目都有对应的插件，比如babel插件[babel-plugin-transform-remove-console](https://www.npmjs.com/package/babel-plugin-transform-remove-console)、webpack插件[terser-webpack-plugin](https://www.npmjs.com/package/terser-webpack-plugin/v/1.4.5)等。但是我们的项目是属于php的前后端不分离项目，这应该怎么办呢？只能靠自己手搓nodejs脚本了。(需要支持node环境)
</code></pre><h3 id="思路" tabindex="-1"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> <strong>思路</strong></h3><p>引入npm包管理工具，利用nodejs脚本修改文件内容，去除所有的console.log。然后利用git hooks脚本实现自动化，再然后通过lint-staged实现监听变化的文件。</p><h3 id="npm初始化" tabindex="-1"><a class="header-anchor" href="#npm初始化" aria-hidden="true">#</a> <strong>npm初始化</strong></h3><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>npm init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后根据命令行输入一系列命令，最后生成package.json文件。</p><h3 id="nodejs脚本文件" tabindex="-1"><a class="header-anchor" href="#nodejs脚本文件" aria-hidden="true">#</a> <strong>nodejs脚本文件</strong></h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// path.resolve() 方法会把一个路径或路径片段的序列解析为一个绝对路径。遇到绝对路径时会重新开始解析</span>
<span class="token comment">// path.join() 方法使用平台特定的分隔符把全部给定的 path 片段连接到一起，并规范化生成的路径</span>
<span class="token keyword">function</span> <span class="token function">pathJudge</span><span class="token punctuation">(</span><span class="token parameter">pathStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 pathStr <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> pathStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
 <span class="token keyword">const</span> stats <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">statSync</span><span class="token punctuation">(</span>pathStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 判断路径是否是文件夹</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stats<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">removeConsoleFile</span><span class="token punctuation">(</span>pathStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// 读取文件夹</span>
  <span class="token keyword">const</span> files <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>pathStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">file</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   <span class="token keyword">const</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>pathStr<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">pathJudge</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">function</span> <span class="token function">removeConsoleFile</span><span class="token punctuation">(</span><span class="token parameter">filePath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">const</span> stats <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">statSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>filePath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.js&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> filePath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.php&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> content <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  content <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">console.log\\((.*)\\);?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> content<span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">//这里是用来判断是否执行循环目录</span>
 <span class="token keyword">let</span> filePath <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_PATH</span><span class="token punctuation">;</span>
 
 <span class="token keyword">if</span> <span class="token punctuation">(</span>filePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">pathJudge</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这里是通过lint-staged拿到的变化的文件  </span>
  filePath <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  filePath<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">filePath</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   <span class="token function">pathJudge</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>



</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="脚本自动化执行" tabindex="-1"><a class="header-anchor" href="#脚本自动化执行" aria-hidden="true">#</a> <strong>脚本自动化执行</strong></h3>`,10)),s("ol",null,[n[11]||(n[11]=t("<li><p><strong>git hooks介绍</strong></p><p>Git hooks 是 Git 提供的一种机制，允许在特定事件发生时执行自定义脚本。它们可以让你在 Git 的生命周期中插入自定义的行为，这能帮助开发团队在代码提交、合并、推送等操作时进行自动化处理，如代码格式化、单元测试、静态检查等。以下是常见的 Git hooks 类型：</p><table><thead><tr><th>Hook 名称</th><th>触发时机</th><th>用途</th></tr></thead><tbody><tr><td><code>applypatch-msg</code></td><td><code>git am</code> 处理补丁文件时</td><td>检查补丁文件的提交信息</td></tr><tr><td><code>pre-applypatch</code></td><td><code>git am</code> 应用补丁之前</td><td>执行动作，如消息通知</td></tr><tr><td><code>post-applypatch</code></td><td><code>git am</code> 应用补丁之后</td><td>通常用于通知用户补丁应用完成</td></tr><tr><td><code>pre-commit</code></td><td>提交代码之前</td><td>检查代码，如运行测试或代码风格检查</td></tr><tr><td><code>prepare-commit-msg</code></td><td><code>git commit</code> 生成提交信息之前</td><td>修改生成的提交信息模板</td></tr><tr><td><code>commit-msg</code></td><td><code>git commit</code> 编写提交信息之后</td><td>检查或修改提交信息</td></tr><tr><td><code>post-commit</code></td><td>提交成功后</td><td>通知用户或执行后续动作，如触发 CI/CD 流程</td></tr><tr><td><code>pre-rebase</code></td><td><code>git rebase</code> 之前</td><td>允许钩子脚本在变基前停止执行或执行前准备动作</td></tr><tr><td><code>post-rewrite</code></td><td>由 <code>git commit --amend</code> 和 <code>git rebase</code> 等命令重写提交记录后</td><td>通知用户提交记录被重写</td></tr><tr><td><code>pre-push</code></td><td><code>git push</code> 之前</td><td>运行任务，如发布前检查或测试</td></tr><tr><td><code>pre-receive</code></td><td>远程仓库接收到推送前</td><td>检查推送内容或拒绝推送</td></tr><tr><td><code>update</code></td><td>远程仓库接收到推送，分支更新时</td><td>检查更新内容或拒绝更新</td></tr><tr><td><code>post-receive</code></td><td>远程仓库接收到推送后</td><td>执行后续任务，如部署或通知</td></tr><tr><td><code>post-update</code></td><td><code>git push</code> 更新成功后</td><td>通常用于更新服务端的引用或通知</td></tr><tr><td><code>reference-transaction</code></td><td>引用被创建、更新或删除时</td><td>跟踪引用变化</td></tr><tr><td><code>push-to-checkout</code></td><td>远程推送直接签出到工作目录时</td><td>更新工作目录内容前执行动作</td></tr><tr><td><code>pre-auto-gc</code></td><td><code>git gc --auto</code> 之前</td><td>在自动垃圾回收前执行动作</td></tr><tr><td><code>post-checkout</code></td><td>切换分支或恢复文件之后</td><td>通知用户或执行后续任务，如重建依赖</td></tr><tr><td><code>post-merge</code></td><td>合并完成后</td><td>通知用户或执行后续任务，如重新编译</td></tr><tr><td><code>post-rewrite</code></td><td>由 <code>git commit --amend</code> 和 <code>git rebase</code> 等命令重写提交记录后</td><td>通知用户提交记录被重写</td></tr><tr><td><code>pre-reflog</code></td><td>更新引用日志前</td><td>执行检查或准备工作</td></tr><tr><td><code>post-reflog</code></td><td>更新引用日志后</td><td>通知用户或执行后续任务</td></tr><tr><td><code>post-index-change</code></td><td>索引文件被更改后</td><td>通知用户或执行后续任务</td></tr></tbody></table><p>其中<strong>pre-commit</strong>这个hooks是我们所需要使用的。</p></li>",1)),s("li",null,[n[1]||(n[1]=s("p",null,[s("strong",null,"husky使用")],-1)),s("p",null,[s("a",u,[n[0]||(n[0]=a("husky官网")),o(e)])]),n[2]||(n[2]=t(`<p>首先安装husky</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>npm install <span class="token operator">--</span><span class="token function">save-dev</span> husky
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>初始化husky，会在package.json生成一个script命令</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>npx husky init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;prepare&quot;</span><span class="token operator">:</span> <span class="token string">&quot;husky&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行这个命令 <code>npm run prepare</code>，会在 <code>.husky/</code> 目录中创建一个 <code>pre-commit</code> 文件，在这个里面可以执行shell命令，如何npm run xxx等等。（<strong>husky4以上版本</strong>）</p><p>比如我们要执行这个node脚本呢，就可以在这个文件里面写一下命令就会在提交前执行我们的node脚本。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>node <span class="token punctuation">.</span><span class="token operator">/</span>remove<span class="token operator">-</span>console<span class="token punctuation">.</span>js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样我们的工作量基本完成了90%了。接下来我们用lint-staged来完成只去除修改过的文件的console。</p>`,9))]),s("li",null,[n[8]||(n[8]=s("p",null,"lint-staged使用",-1)),s("p",null,[s("a",k,[n[3]||(n[3]=a("官网")),o(e)])]),n[9]||(n[9]=t(`<p>首先install</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>npm install <span class="token operator">--</span><span class="token function">save-dev</span> lint-staged <span class="token comment"># requires further setup</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>package.json加入以下代码</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>  <span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;*.{js,php}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;npm run remove-console&quot;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面创建的 <code>pre-commit</code>文件加入以下代码</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>npx lint-staged
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6)),s("p",null,[n[5]||(n[5]=a("nodejs脚本中 ")),n[6]||(n[6]=s("code",null,"process.argv.slice(2)",-1)),n[7]||(n[7]=a("可以拿到变化的文件数组，遍历即可。")),s("a",v,[n[4]||(n[4]=a("process_argv介绍")),o(e)])]),n[10]||(n[10]=s("p",null,"现在就完成所有的工作量了。",-1))])]),n[23]||(n[23]=s("h3",{id:"补充",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#补充","aria-hidden":"true"},"#"),a(),s("strong",null,"补充")],-1)),s("ol",null,[s("li",null,[n[15]||(n[15]=t(`<p><strong>设置node运行环境变量</strong></p><p>windows cmd中：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>set NODE_ENV=production &amp;&amp; node app.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>windows powershell中：</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token variable">$env</span>:NODE_ENV=<span class="token string">&quot;production&quot;</span><span class="token punctuation">;</span> node app<span class="token punctuation">.</span>js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>macOS/Linux中：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">NODE_ENV</span><span class="token operator">=</span>production <span class="token function">node</span> app.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>node脚本可以通过 <code>p<wbr>rocess.env.xxx</code>拿到对应的值。</p>`,8)),s("p",null,[n[13]||(n[13]=a("这样多端不同意很不方便，我们可以使用")),s("a",m,[n[12]||(n[12]=s("code",null,"cross-env",-1)),o(e)]),n[14]||(n[14]=a("这个库统一规范。"))]),n[16]||(n[16]=t(`<p>使用方法：</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>cross-env NODE_PATH=<span class="token punctuation">.</span><span class="token operator">/</span>addons/fecmall/fecro/ node <span class="token function">remove-console</span><span class="token punctuation">.</span>js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2))]),s("li",null,[n[20]||(n[20]=t(`<p><strong>commitizen使用</strong></p><p>团队开发时，可以使用commitizen规范提交日志。</p><p>首先安装对应的包。全局安装commitizen</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>npm install <span class="token operator">-</span>g commitizen
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4)),s("p",null,[n[18]||(n[18]=a("安装")),s("a",g,[n[17]||(n[17]=a("cz-conventional-changelog")),o(e)]),n[19]||(n[19]=a(" commitizen 适配器。（还有一个cz-customizable可以定制提交规范）"))]),n[21]||(n[21]=t(`<div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>commitizen init cz-conventional-changelog <span class="token operator">--</span>save <span class="token operator">--</span><span class="token function">save-exact</span>  <span class="token comment">#--save-exact 代表版本，不会加^和~</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样package.json文件会增加以下内容</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;config&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;commitizen&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./node_modules/cz-conventional-changelog&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们 <code>git add</code>之后，然后执行 <code>git cz</code>就会出现以下内容。</p><figure><img src="`+d+'" alt="image-20240817153750652" tabindex="0" loading="lazy"><figcaption>image-20240817153750652</figcaption></figure><p>这样就大功告成啦。</p>',6))])])])}const x=p(r,[["render",b],["__file","remove-console.html.vue"]]);export{x as default};
