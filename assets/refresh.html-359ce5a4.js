import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as i,a as t}from"./app-8fc3dc51.js";const r="/blog-v2/assets/image-20210915162344520-85be4842.png",g="/blog-v2/assets/image-20210915164745744-e0049dce.png",n="/blog-v2/assets/image-20210915164909417-86c0459d.png",o="/blog-v2/assets/image-20210915180703330-70811532.png",s="/blog-v2/assets/image-20210915180806104-f8a5c11c.png",c={},d=t('<h3 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> <strong>前言</strong></h3><p>项目开发过程中，我遇到到了这样一个问题，当时有这样一个需求，上方搜索一个企业，下面的几个 tab 页展示对应的数据。</p><figure><img src="'+r+'" alt="image-20210915162344520" tabindex="0" loading="lazy"><figcaption>image-20210915162344520</figcaption></figure><p>我开始设计时，把每一个 tab 页当成一个路由，然后把这个企业的 eid 传到每个 tab 页中（每个 tab 页用 watch 进行监听），进行数据展示。这样就会存在一个问题，我只要一搜索企业，下面的每个 tab 页中的接口都会调用，很不友好。</p><p>所以，希望设计成这样：切换到每个 tab 页时，才调用对应的接口，并且同一家公司，tab 页切换过去一次后，第二次切换过去，不需要再调接口。</p><h3 id="开发过程" tabindex="-1"><a class="header-anchor" href="#开发过程" aria-hidden="true">#</a> <strong>开发过程</strong></h3><p>首先，tab 监听 eid 时要判断是否有新的 eid 进来，如果有才进行接口调用，因为 vue 数据更新就是通过 watch 来操作的，只要数据更新了，每个子组件的 watch 都会执行到。我最开始设计的时候没有执行到这个情况，所以一搜索企业，就会调用所有接口。</p><figure><img src="'+g+'" alt="image-20210915164745744" tabindex="0" loading="lazy"><figcaption>image-20210915164745744</figcaption></figure><p>里面的 reRender 函数是强制刷新函数(利用 v-if 进行子组件强制刷新，利用 keep-alive 缓存 eid)</p><figure><img src="'+n+'" alt="image-20210915164909417" tabindex="0" loading="lazy"><figcaption>image-20210915164909417</figcaption></figure><p>然后，每个组件都在自己的 mounted 或者 created 生命周期请求接口。</p><p>tab 页切换时，利用 actived 生命周期进行一些操作，判断缓存的 eid 是否和新的 eid 相等，是的话就不做什么，不是的话就进行刷新操作</p><figure><img src="'+o+'" alt="image-20210915180703330" tabindex="0" loading="lazy"><figcaption>image-20210915180703330</figcaption></figure><h3 id="最终代码" tabindex="-1"><a class="header-anchor" href="#最终代码" aria-hidden="true">#</a> <strong>最终代码</strong></h3><figure><img src="'+s+'" alt="image-20210915180806104" tabindex="0" loading="lazy"><figcaption>image-20210915180806104</figcaption></figure>',15),p=[d];function f(m,l){return e(),i("div",null,p)}const b=a(c,[["render",f],["__file","refresh.html.vue"]]);export{b as default};
