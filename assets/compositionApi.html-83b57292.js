const e=JSON.parse('{"key":"v-6d7b448e","path":"/article/vue/compositionApi.html","title":"composition api的使用","lang":"zh-CN","frontmatter":{"author":"菜鸡小谢","date":"2022-10-28T00:00:00.000Z","isOriginal":"composition api","title":"composition api的使用","original":true,"description":"前言 看了挺久的vue3的组合式api，一直没有实际练习，终于找了个时间下手了，来总结一波。 什么是组合式api？ 组合式 API (Composition API) 是一系列 API 的集合，使我们可以使用函数而不是声明选项的方式书写 Vue 组件。它是一个概括性的术语，涵盖了以下方面的 API： 响应式 API：例如 ref() 和 reactive()，使我们可以直接创建响应式状态、计算属性和侦听器。 生命周期钩子：例如 onMounted() 和 onUnmounted()，使我们可以在组件各个生命周期阶段添加逻辑。 依赖注入：例如 provide() 和 inject()，使我们可以在使用响应式 API 时，利用 Vue 的依赖注入系统。","head":[["meta",{"property":"og:url","content":"https://xiezhenghua123.github.io/blog-v2/article/vue/compositionApi.html"}],["meta",{"property":"og:title","content":"composition api的使用"}],["meta",{"property":"og:description","content":"前言 看了挺久的vue3的组合式api，一直没有实际练习，终于找了个时间下手了，来总结一波。 什么是组合式api？ 组合式 API (Composition API) 是一系列 API 的集合，使我们可以使用函数而不是声明选项的方式书写 Vue 组件。它是一个概括性的术语，涵盖了以下方面的 API： 响应式 API：例如 ref() 和 reactive()，使我们可以直接创建响应式状态、计算属性和侦听器。 生命周期钩子：例如 onMounted() 和 onUnmounted()，使我们可以在组件各个生命周期阶段添加逻辑。 依赖注入：例如 provide() 和 inject()，使我们可以在使用响应式 API 时，利用 Vue 的依赖注入系统。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-07T09:29:28.000Z"}],["meta",{"property":"article:author","content":"菜鸡小谢"}],["meta",{"property":"article:published_time","content":"2022-10-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-07T09:29:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"composition api的使用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-07T09:29:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"菜鸡小谢\\"}]}"],["meta",{"name":"google-site-verification","content":"8BRrT9I5fcaBjpw3Q8I49161FQtzGeN0qIYF54dqF0Y"}]]},"headers":[{"level":3,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":3,"title":"什么是组合式api？","slug":"什么是组合式api","link":"#什么是组合式api","children":[]},{"level":3,"title":"为什么要有组合式api？","slug":"为什么要有组合式api","link":"#为什么要有组合式api","children":[]},{"level":3,"title":"vue版本","slug":"vue版本","link":"#vue版本","children":[]},{"level":3,"title":"实现效果","slug":"实现效果","link":"#实现效果","children":[]},{"level":3,"title":"代码逻辑","slug":"代码逻辑","link":"#代码逻辑","children":[]}],"git":{"createdTime":1723022968000,"updatedTime":1723022968000,"contributors":[{"name":"xiezhenghua","email":"xiezhenghua@sailvan.com","commits":1}]},"readingTime":{"minutes":5.54,"words":1663},"filePathRelative":"article/vue/compositionApi.md","localizedDate":"2022年10月28日","excerpt":"<h3> 前言</h3>\\n<p>看了挺久的vue3的组合式api，一直没有实际练习，终于找了个时间下手了，来总结一波。</p>\\n<h3> 什么是组合式api？</h3>\\n<p>组合式 API (Composition API) 是一系列 API 的集合，使我们可以使用函数而不是声明选项的方式书写 Vue 组件。它是一个概括性的术语，涵盖了以下方面的 API：</p>\\n<ul>\\n<li><a href=\\"https://cn.vuejs.org/api/reactivity-core.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">响应式 API</a>：例如 <code>ref()</code> 和 <code>reactive()</code>，使我们可以直接创建响应式状态、计算属性和侦听器。</li>\\n<li><a href=\\"https://cn.vuejs.org/api/composition-api-lifecycle.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">生命周期钩子</a>：例如 <code>onMounted()</code> 和 <code>onUnmounted()</code>，使我们可以在组件各个生命周期阶段添加逻辑。</li>\\n<li><a href=\\"https://cn.vuejs.org/api/composition-api-dependency-injection.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">依赖注入</a>：例如 <code>provide()</code> 和 <code>inject()</code>，使我们可以在使用响应式 API 时，利用 Vue 的依赖注入系统。</li>\\n</ul>","copyright":{"author":"菜鸡小谢"},"autoDesc":true}');export{e as data};
